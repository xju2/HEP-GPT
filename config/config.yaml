# data
out_dir: 'out-trackml'  # where to save the model checkpoints
log_interval: 1  # how often to log training progress

train_data: data/trackml/train.bin
val_data: data/trackml/val.bin

# system
device: 'cuda' # examples: 'cpu', 'cuda', 'cuda:0', 'cuda:1' etc., or try 'mps' on macbooks
dtype: 'bfloat16' # 'float32', 'bfloat16', or 'float16', the latter will auto implement a GradScaler
compile: True # use PyTorch 2.0 to compile the model to be faster
always_save_checkpoint: True # if True, always save a checkpoint after each eval
init_from: 'scratch' # 'scratch' or 'resume' or 'gpt2*'

# wandb logging
wandb_log: False # disabled by default
wandb_project: 'owt'
wandb_run_name: 'gpt2' # 'run' + str(time.time())

fabric:
  accelerator: auto  # cpu, gpu, tpu, auto
  devices: 1
  strategy: ddp  # dp, ddp, ddp_spawn, xla, deepspeed, fsdp

# training
training:
  gradient_accumulation_steps: 1  # used to simulate larger batch sizes
  batch_size: 200 # if gradient_accumulation_steps > 1, this is the micro-batch size
  block_size: 20  # maximum sequence length

  # DDP settings
  backend: 'nccl' # 'nccl', 'gloo', etc.

  # evaluation settings
  eval_interval: 2000
  log_interval: 1
  eval_iters: 200
  eval_only: False # if True, script exits right after the first eval
  max_epochs: 1

# model architecture
model:
  n_layer: 3
  n_head: 4
  n_embd: 32
  dropout: 0
  bias: False  # do we use bias inside LayerNorm and Linear layers?

# adamw optimizer
optimizer:
  learning_rate: 1e-3 # max learning rate
  max_iters: 600_000 # total number of training iterations
  weight_decay: 1e-1
  beta1: 0.9
  beta2: 0.95
  grad_clip: 1.0 # clip gradients at this value, or disable if == 0.0

  # learning rate decay settings
  decay_lr: True  # whether to decay the learning rate
  warmup_iters: 2000  # how many steps to warm up for
  lr_decay_iters: 600000  # should be ~= max_iters per Chinchilla
  min_lr: 6e-5  # minimum learning rate, should be ~= learning_rate/10 per Chinchilla
